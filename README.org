#+date: <2024-04-13 Sat>

[[https://github.com/emacs-jp/dmacro][./images/dmacro-header.png]]
[[https://github.com/emacs-jp/dmacro/blob/master/LICENSE][https://img.shields.io/github/license/emacs-jp/dmacro.svg?style=flat-square]]
[[https://github.com/emacs-jp/dmacro/releases][https://img.shields.io/github/tag/emacs-jp/dmacro.svg?style=flat-square]]
[[https://github.com/emacs-jp/dmacro/actions][https://github.com/emacs-jp/dmacro/workflows/Main%20workflow/badge.svg]]

* Table of Contents
- [[#description][Description]]
- [[#install][Install]]
- [[#usage][Usage]]
- [[#customize][Customize]]
- [[#information][Information]]
  - [[#contribution][Contribution]]
  - [[#license][License]]

* Description
[[./images/dmacro-demo.gif]]

Repeated detection and execution of key operation.

* Install
Sample install code using [[https://github.com/conao3/leaf.el][leaf.el]].

#+begin_src emacs-lisp
  (leaf dmacro
    :ensure t
    :custom `((dmacro-key . ,(kbd "C-S-e")))
    :global-minor-mode global-dmacro-mode)
#+end_src

* Usage
First turn on =dmacro-mode= or =global-dmacro-mode=.

Then press =dmacro-key= after making repeated edits.

** Example1
#+begin_src fundamental
  abc abc _
          ^(point)
#+end_src

after type =dmacro-key=, your buffer should be...

#+begin_src fundamental
  abc abc abc _
#+end_src

and type =dmacro-key=, then...

#+begin_src fundamental
  abc abc abc abc _
#+end_src

** Example2
#+begin_src fundamental
abcdef ab_
         ^(point)
#+end_src

after type =dmacro-key=, your buffer should be...

#+begin_src fundamental
  abcdef abcdef _
#+end_src

and type =dmacro-key=, then...

#+begin_src fundamental
  abcdef abcdef abcdef _
#+end_src

* Customize
- dmacro-key :: Key sequences for dmacro

  [NOTE]: You have to set this variable before =dmacro-mode= is started.

* Information
** Contribution
We welcome PR!

*** Require tools for testing
- keg
  #+begin_src shell
    cd ~/
    gh repo clone conao3/keg.el .keg
    export PATH="$HOME/.keg/bin:$PATH"
  #+end_src

*** Running test
We recommend the following operation flow:
#+begin_src shell
  make                              # Install git-hooks in local .git

  git branch [feature-branch]       # Create branch named [feature-branch]
  git switch [feature-branch]       # Switch branch named [feature-branch]

  # <edit loop>
  emacs dmacro.el                   # Edit something you want

  make test                         # Test dmacro via multi version Emacs (but there is no test now...)
  git commit -am "brabra"           # Commit (auto-run test before commit)
  # </edit loop>

  gh repo fork                      # Create fork at GitHub
  git push origin [feature-branch]  # Push feature-branch to your fork
  gh pr create                      # Create pull-request
#+end_src

** License
#+begin_example
  FSFAP
  Copyright (c) 1993 Toshiyuki Masui
  https://github.com/emacs-jp/dmacro/blob/master/LICENSE
#+end_example
